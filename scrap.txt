/**get the previous edited items by sorting based on created date
       * as the memory map will return the same edited values as latest ones
       */
      /**get the latest updateId is the taskListId exists */
      console.log("wroking on --tasklist id/:", updateId.split(":")[1]);
      let storedTaskListId = await Historic_TaskList.find({
        taskListId: updateId.split(":")[1],
        operation: operation,
      }).sort({ createdOn: 1 });
      console.log("storedTaskList data::", storedTaskListId);
      let tasksArray = Object.entries(storedTaskListId);
      if (tasksArray.length !== 1) {
        console.log("Array taskids:", tasksArray.length);
        console.log("Array taskids:", tasksArray[tasksArray.length - 2][1]);
        let { name, taskListId, userId } = tasksArray[tasksArray.length - 2][1];
        console.log("edit ops -->updating::", name, taskListId, userId);
        /**revert the old/history name */
        let query = { taskListId: taskListId, userId: userId };
        let update = { name: name };
        let updatedTaskList = await TaskList.updateOne(query, update);
        console.log("Update historic tasklist::", updatedTaskList.n);
        toDeleteHistoricDataId = tasksArray[tasksArray.length - 2][1].updateId;
      } else {
        /**delete the left out*/
        let deleted = await Historic_TaskList.deleteOne({
          updateId: storedTaskListId.updateId,
        });
        console.log("Deleted additional:", deleted);
      }